#!/usr/bin/perl -w

# Be strict to avoid messy code
use strict;

# Make an array with all skillnames
my @skillnames = ("Overall","Attack","Defence","Strength","Constitution","Ranged","Prayer","Magic","Cooking","Woodcutting","Fletching","Fishing","Firemaking","Crafting","Smithing","Mining","Herblore","Agility","Thieving","Slayer","Farming","Runecrafting","Hunter","Construction","Summoning","Dungeoneering");

# The amount of skills in RuneScape
my $skillcount = 25;

# Use FindBin module to get script directory
use FindBin;

# Use the Cwd module to get the current working directory
use Cwd;

# Get the cwd
my $cwd = getcwd;

# Name of our xrc gui resource file
my $xrc_gui_file = "windowframe.xrc";

# Disable buffering
$|=1;

# Get script directory
my $scriptdir = $FindBin::RealBin;
# Get script filename
my $scriptname = $FindBin::Script;

# The below if, checks if the script is running in standalone mode or addon mode
# If the scriptname is player_lookup then
if ($scriptname =~ /^(player_lookup|script_loader)$/)
{
	# Add the universal addons directory to the include path
	unshift @INC, "$scriptdir/modules";
	
	# Use the scriptdir as cwd
	$cwd = $scriptdir;
}

# Detect the current OS
my $OS = "$^O";

# Make a variable for users homedir
my $HOME;
# If we are on windows
if ($OS =~ /MSWin32/)
{
	# Get the environment variable for USERPROFILE
	$HOME = $ENV{"USERPROFILE"};
	# Replace all / with \
	$HOME =~ s/\//\\/g;
}
# Else we are on UNIX
else
{
	$HOME = $ENV{"HOME"};
}

# If the parameters contains --scriptpath= then
if ("@ARGV" =~ /(-|--)scriptpath=/)
{
	# If this script have a working directory in a system path
	if ($cwd =~ /^(\/usr\/s?bin|\/opt\/|\/usr\/local\/s?bin)/)
	{
		# Change the $cwd to $HOME/.config/runescape/modules/addons/universal/player_lookup
		$cwd = $ENV{"HOME"}."/.config/runescape/modules/addons/universal/player_lookup";		
	}
	elsif ($OS =~ /MSWin32/)
	{
		# Set the $cwd to $cwd."/modules/addons/universal/player_lookup"
		$cwd = $cwd."/modules/addons/universal/player_lookup"
	}
	else
	{
		# Set the $cwd to $cwd."/modules/addons/universal/player_lookup"
		$cwd = $cwd."/../../../modules/addons/universal/player_lookup"
	}
}


#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------

package wxTopLevelFrame;

use Wx qw[:everything];
use Wx::XRC;
# Which events shall we include
use Wx::Event qw(EVT_BUTTON EVT_TEXT_ENTER);

use base qw(Wx::Frame Wx::ScrolledWindow);

# Use LWP::Simple module to get website content (crossplatform)
use LWP::Simple;

# Use an xml/rss parser for the recent player activity
eval "use XML::RSSLite"; die "Cannot load XML::RSSLite\n" if $@;

sub new
{
	# Create a class
	my $class = shift;
	
	# Assign class object to $self
	my $self = $class->SUPER::new;
	
	# Initialize everything
	$self->initialize;
	
	return $self;
}

sub initialize
{
	# Get pointers
	my $self = shift;
	
	# Create mutators for widgets (enter the objectname for every object here)
	$self->create_mutator
	(
		qw
		(
			xrc_resource
		)
	);
	
	load_xrc_gui($self);
	
	set_events($self);
	
	set_tooltips($self);
	
}

sub load_xrc_gui
{
	# Get the pointers
	my $self = shift;
	
	# Get the xrc file
	my $xrc_file = "$cwd/$xrc_gui_file";
	
	# Initialize WX
	Wx::InitAllImageHandlers();
	
	# Create xrc/xml resource
	$self->xrc_resource = Wx::XmlResource->new;
	# Initialize handlers
	$self->xrc_resource->InitAllHandlers;
	# Load the xrc file
	$self->xrc_resource->Load($xrc_file);
	
	# Tell what window/frame to load
	$self->xrc_resource->LoadFrame($self,undef,"mainwindow");
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_events
{
	# Get the pointers
	my $self = shift;
	
	# Setup the events
	# EVT_BUTTON($self, Wx::XmlResource::GetXRCID('objectname'), \&function);
	EVT_BUTTON($self, Wx::XmlResource::GetXRCID('lookup'), \&lookup_player);
	EVT_TEXT_ENTER($self, Wx::XmlResource::GetXRCID('name'), \&lookup_player);
	
	
	# Do the layout
	set_layout($self);
	
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_layout
{
	# Get pointers
	my $self = shift;
	
	# Find the widgets
	# $self->objectname = $self->FindWindow('objectname');
	
	# Get the highscores panel
	$self->{highscores} = $self->FindWindow('highscores');
	# Make it scrollable
	setScrollBars($self->{highscores});
	
	# Get the recentactivity panel
	$self->{recentactivity_panel} = $self->FindWindow('recentactivity_panel');
	
	# Get the textbox for player name input
	$self->{name} = $self->FindWindow('name');
	# Set the focus to the textbox
	$self->{name}->SetFocus();
	
	# Make 3 objects for each skill and connect them to the widgets
	foreach my $skill(@skillnames)
	{
		$self->{$skill."stats"} = $self->FindWindow($skill.'stats');
	}
	
	# Get the playerbio label
	$self->{playerinfo} = $self->FindWindow('playerinfo');
	
	# Get the claninfo label
	$self->{claninfo} = $self->FindWindow('claninfo');
	
	# Get the recentactivity label
	$self->{recentactivity} = $self->FindWindow('recentactivity');
	
	# Get the chathead bitmap widget
	$self->{chathead} = $self->FindWindow('chathead');
	
	# Get the fullavatar bitmap widget
	$self->{fullavatar} = $self->FindWindow('fullavatar');
	
	# Set the icon for the window
	$self->SetIcon(Wx::Icon->new("$cwd/bitmaps/default_chat.png", wxBITMAP_TYPE_PNG));
	
	# Set default size
	$self->SetSize(500,530);
	
	# Make sure the window cannot be resized smaller
	$self->SetMinSize($self->GetSize);
	$self->SetMaxSize($self->GetSize);
	
	# Set the layout
	$self->Layout;
	# Refresh window
	$self->Refresh;
}

#
#---------------------------------------- *** ----------------------------------------
#

sub lookup_player
{
	# Get the pointers
	my $self = shift;
	
	# Get the name of the player
	my $playername = $self->{name}->GetValue();
	
	# If playername is not empty
	if ($playername !~ /^$/)
	{
		fetchstats($self, $playername);
		fetchplayerdata($self, $playername);
	}
	
}

#
#---------------------------------------- *** ----------------------------------------
#

# Create mutator function from "Programming Perl"
sub create_mutator
{

	my $self = shift;

	# From "Programming Perl" 3rd Ed. p338.
	for my $attribute (@_)
	{

		no strict "refs"; # So symbolic ref to typeglob works.
		no warnings;      # Suppress "subroutine redefined" warning.

		*$attribute = sub : lvalue
		{

			my $self = shift;

			$self->{$attribute} = shift if @_;
			$self->{$attribute};

		};

	}

}


### Events

sub close_clicked
{
	# Get pointers
	my ($self, $event) = @_;
	
	# Close window
	$self->Destroy();
}

#
#---------------------------------------- *** ----------------------------------------
#

sub setScrollBars
{
	# Get the widgets to make scrollable
	my @scrolledWindows = @_;
	
	# Set scroll properties
	my $pixelsPerUnitX = 0;#15; 
    my $pixelsPerUnitY = 15; 
    my $noUnitsX = 0;#100; 
    my $noUnitsY = 100; 
    
    # If we are on windows
    if ($OS =~ /MSWin32/)
	{
		# Add information about scrolling the X axis
		$pixelsPerUnitX = 15;
		$noUnitsX = 100; 
	}
	
	# For each widget to make scrollable
	foreach my $window (@scrolledWindows)
	{
		# Enable scrolling
		$window->SetScrollbars($pixelsPerUnitX, $pixelsPerUnitY, $noUnitsX, $noUnitsY);
	} 
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_tooltips
{
	my ($self) = @_;
		
	# Set tooltips with info about the settings
	# $self->objectname->SetToolTip("message");
	
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_avatar
{
	# Get the passed parameters
	my ($self, $player) = @_;
	
	# Fetch the chathead and full avatar from runescape.com
	getstore("http://services.runescape.com/m=avatar-rs/$player/chat.png", "$cwd/bitmaps/chat_tmp.png");
	getstore("http://services.runescape.com/m=avatar-rs/$player/full.png", "$cwd/bitmaps/full_tmp.png");	
	
	# Load the downloaded chathead into the window
	$self->{chathead}->SetBitmap(Wx::Bitmap->new("$cwd/bitmaps/chat_tmp.png", wxBITMAP_TYPE_PNG));
	# Load the downloaded full avatar into the window
	$self->{fullavatar}->SetBitmap(Wx::Bitmap->new("$cwd/bitmaps/full_tmp.png", wxBITMAP_TYPE_PNG));
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_playerinfo
{
	# Get the passed data
	my ($self, $playerinfo) = @_;
	
	# Replace member:true with member:Yes
	$playerinfo =~ s/member:true/member:Yes/;
	# Replace member:false with member:No
	$playerinfo =~ s/member:false/member:No/;
	
	# If the player is in a clan
	if ($playerinfo =~ /,clan:/)
	{
		# Fish out the player name, title and memberstatus
		$playerinfo =~ s/^member:(.+),title:(|.+),clan:.+,name:(.+),recruiting:.+,world.*/Name: $3\nTitle: $2\nMember: $1/g;
	}
	# Else player is not in a clan
	else
	{
		# Fish out the player name, title and memberstatus
		$playerinfo =~ s/^member:(.+),title:(|.+),name:(.+),world.*/Name: $3\nTitle: $2\nMember: $1/g;
	}
	
	# Add the info to the window
	$self->{playerinfo}->SetLabel($playerinfo);
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_claninfo
{
	# Fetch the passed data
	my ($self, $claninfo) = @_;
	
	# If the player is in a clan
	if ($claninfo =~ /,clan:/)
	{
		# Fish out the clan name (if any) and prepare it for the label
		$claninfo =~ s/^.+,clan:(.+),n.+,recruiting:(true|false),w.+/Clan:  $1\nRecruiting: $2/g;
		
		# Replace true with Yes and false with No
		$claninfo =~ s/Recruiting: true/This clan is currently\nrecruiting people!/;
		$claninfo =~ s/Recruiting: false/This clan is currently\nNOT recruiting people./;
	}
	# Else
	else
	{
		# Set Clan and Recruiting to empty
		$claninfo = "Clan: ";
	}
	
	# Add the clanstatus into the window
	$self->{claninfo}->SetLabel($claninfo);
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_recent_activity
{
	# Get the passed data
	my ($self, $player) = @_;
	
	# Fetch the recent activity rss feed
	my $rssfeed = get("http://services.runescape.com/m=adventurers-log/rssfeed?searchName=$player");
	
	# Make a hash reference for the RSSLite parser
	my %recent_activity;
	
	# Parse the RSSfeed
	parseRSS(\%recent_activity, \$rssfeed);
	
	# Make a variable to contain the players activity
	my $activity = "\n";
	
	# For each value in the array
	foreach my $item (@{$recent_activity{'item'}})
	{
		# Get the published date so we can remove the unused time
		my $pubDate = "$item->{'pubDate'}";
		
		# Remove the timestamp because it is always 00:00:00 GMT
		$pubDate =~ s/\s+\d{2,2}:\d{2,2}:\d{2,2}\s+GMT//g;
		
		# Make a variable to contain the description because it needs fixing too
		my $description = $item->{'description'};
		
		# Remove all tabs
		$description =~ s/^\s+//g;
		
		# Replace all multiple whitespaces with normal whitespace
		$description =~ s/\s+/ /g;
		
		$activity = $activity."$item->{'title'} - $pubDate\n$description\n________________________________________________________\n\n";
	}
	
	# Fix some stuff in the finished activity list
	$activity =~ s/(&#8217;|&APOS;)/'/gi;
	
	# Add the recent activity to the window
	$self->{recentactivity}->SetLabel($activity);
	
	# Make the label wrap
	$self->{recentactivity}->Wrap(400);
	
	# Make it scrollable
	setScrollBars($self->{recentactivity_panel});
}

#
#---------------------------------------- *** ----------------------------------------
#

sub set_playerbio
{
	# Get the passed data
	my ($self, $player) = @_;
	
	# Fetch the player details
	my $jquerystring = get('http://services.runescape.com/m=website-data/g=runescape/playerDetails.ws?names=["'.$player.'"]&callback=jQuery000000000000000_0000000000');
	
	# Remove unneeded parts of the output
	$jquerystring =~ s/(jQuery000000000000000_0000000000\(\[\{|"|\}\]\);)//g;
	
	# Parse and set the player claninfo
	set_claninfo($self, $jquerystring);
	
	# Parse and set the playerbio info
	set_playerinfo($self, $jquerystring);
	
	# Parse the players recent activity and display it on the window
	set_recent_activity($self,$player)
}

#
#---------------------------------------- *** ----------------------------------------
#

sub fetchplayerdata
{
	# Get the passed data
	my ($self, $player) = @_;
	
	# Fetch the players display pictures and load them into the window
	set_avatar($self, $player);
	
	set_playerbio($self, $player);
	
}

#
#---------------------------------------- *** ----------------------------------------
#

sub fetchstats
{
	# Get pointers
	my ($self, $player) = @_;
	
	# Get the highscores info of a player
	my $highscore = get("http://hiscore.runescape.com/index_lite.ws?player=$player");
	
	# Suppress "uninitialized string" warning if lookup failed
	no warnings;
	
	# If $highscore is empty
	if ($highscore eq '')
	{
		# Tell in console that we found nothing
		print "Player do not exist or is F2P account\n\n";
		
		# Set highscore to null
		$highscore = '0';
	}

	# Enable warnings again
	use warnings;

	# If fetching highscore data was successful
	if ($highscore !~ /^0$/)
	{
		# Split the data by whitespace
		my @playerdata = split /\s/, $highscore;
		
		# Make a for loop that goes through the highscores info
		my $counter;
		for ($counter = 0; $counter <= $skillcount; $counter++)
		{
			# Split the playerdata by ,
			my @skilldata  = split /,/, $playerdata[$counter];
			
			# If skill is ranked
			if ($skilldata[0] !~ /-1/)
			{
				# make numbers more readable
				$skilldata[0] = commify($skilldata[0]);
				$skilldata[2] = commify($skilldata[2]);
				
				# If we are on windows
				if ($OS =~ /MSWin32/)
				{
					# Set the info into the level and rank labels of the skill
					$self->{$skillnames[$counter]."stats"}->SetLabel("Level: $skilldata[1]\nRank: $skilldata[0]\nXP:     $skilldata[2]");
				}
				# Else if we are on mac osx
				elsif ($OS =~ /darwin/)
				{
					# Set the info into the level and rank labels of the skill
					$self->{$skillnames[$counter]."stats"}->SetLabel("Level:\t$skilldata[1]\nRank:\t$skilldata[0]\nXP:      $skilldata[2]");
				}
				# Else
				else
				{
					# Set the info into the level and rank labels of the skill
					$self->{$skillnames[$counter]."stats"}->SetLabel("Level:\t$skilldata[1]\nRank:\t$skilldata[0]\nXP:\t\t$skilldata[2]");
				}
				
			}
			# Else
			else
			{
				# If we are on windows
				if ($OS =~ /MSWin32/)
				{
					# Set the info as Not Available
					$self->{$skillnames[$counter]."stats"}->SetLabel("Level: N/A\nRank: N/A\nXP:     N/A");
				}
				# Else if we are on mac osx
				elsif($OS =~ /darwin/)
				{
					# Set the info as Not Available
					$self->{$skillnames[$counter]."stats"}->SetLabel("Level:\tN/A\nRank:\tN/A\nXP:      N/A");
				}
				
				# Else
				else
				{
					# Set the info as Not Available
					$self->{$skillnames[$counter]."stats"}->SetLabel("Level:\tN/A\nRank:\tN/A\nXP:\t\tN/A");
				}
				
			}
		}
	}
	else
	{
		# Make a for loop that goes through the highscores info
		my $counter;
		for ($counter = 0; $counter <= $skillcount; $counter++)
		{	
			# Set the info about the level, rank and xp label of the skill
			$self->{$skillnames[$counter]."stats"}->SetLabel("Level:\tN/A\nRank:\tN/A\nXP:\t\tN/A");
		}
	}
	
}

#
#---------------------------------------- *** ----------------------------------------
#

sub commify {
	local $_  = shift;
	1 while s/^(-?\d+)(\d{3})/$1,$2/;
	return $_;
}


#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------

package application;
use base qw(Wx::App);

sub OnInit
{
	# Get pointers
	my $self = shift;
	
	# Create mainwindow(new window)
	my $mainwindow = wxTopLevelFrame->new(undef, -1);
	
	# Set mainwindo/topwindow
	$self->SetTopWindow($mainwindow);
	
	# Show the window
	$mainwindow->Show(1);
}

#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------
#---------------------------------------- *** ----------------------------------------


package main;

my $app = application->new;
$app->MainLoop;

1;
